library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ROM_mm is 
	port(
		addr: in std_logic_vector( 8 downto 0);
		data: out std_logic_vector(8 downto 0)
		);
end ROM_mm;

architecture Behavioral of ROM_mm is 
	constant ADDR_WIDTH: integer:=9;
	constant DATA_WIDTH: integer:=9;
	signal addr_reg: std_logic_vector(ADDR_WIDTH-1 downto 0);
	type storage_type is array (0 to 2**ADDR_WIDTH-1)
		of std_logic_vector(DATA_WIDTH-1 downto 0);

constant STOR: storage_type:=(

"000000000", 
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"000000000",
"110010000",
"110001010",
"110000100",
"101111111",
"101111001",
"101110011",
"101101101",
"101100111",
"101100001",
"101011100",
"101010110",
"101010000",
"101001010",
"101000100",
"100111111",
"100111001",
"100110011",
"100101101",
"100101001",
"100100110",
"100100011",
"100011111",
"100011100",
"100011001",
"100010101",
"100010010",
"100001111",
"100001011",
"100001000",
"100000101",
"100000001",
"011111110",
"011111011",
"011110111",
"011110100",
"011110001",
"011101101",
"011101010",
"011100110",
"011100011",
"011100000",
"011011100",
"011011001",
"011010110",
"011010010",
"011001111",
"011001100",
"011001000",
"011000101",
"011000010",
"010111110",
"010111011",
"010111000",
"011001111",
"011001101",
"011001011",
"011001001",
"011000111",
"011000101",
"011000011",
"011000001",
"011000000",
"010111110",
"010111100",
"010111010",
"010111000",
"010110110",
"010110100",
"010110011",
"010110001",
"010100111",
"010100110",
"010100101",
"010100100",
"010100011",
"010100011",
"010100010",
"010100001",
"010100000",
"010011111",
"010011110",
"010011101",
"010011100",
"010011100",
"010011011",
"010011010",
"010011001",
"010011000",
"010010111",
"010010110",
"010010101",
"010010100",
"010010100",
"010010011",
"010010010",
"010010001",
"010010000",
"010001111",
"010001110",
"010001101",
"010001101",
"010001100",
"010001011",
"010001010",
"010001001",
"010001000",
"010000111",
"010000110",
"010000110",
"010000101",
"010000100",
"010000011",
"010000010",
"010000001",
"010000000",
"001111111",
"001111111",
"001111110",
"001111101",
"001111100",
"001111011",
"001111010",
"001111001",
"001111000",
"001110111",
"001110111",
"001110110",
"001110101",
"001110100",
"001110011",
"001110010",
"001110001",
"001110000",
"001110000",
"001101111",
"001101110",
"001101101",
"001101100",
"001101011",
"001101010",
"001101001",
"001101001",
"001101000",
"001100111",
"001100110",
"001100101",
"001100100",
"001100011",
"001100011",
"001100011",
"001100010",
"001100010",
"001100010",
"001100001",
"001100001",
"001100000",
"001100000",
"001011111",
"001011111",
"001011111",
"001011110",
"001011110",
"001011101",
"001011101",
"001011100",
"001011100",
"001011100",
"001011011",
"001011011",
"001011010",
"001010111",
"001010111",
"001010111",
"001010110",
"001010110",
"001010110",
"001010101",
"001010101",
"001010101",
"001010100",
"001010100",
"001010100",
"001010100",
"001010011",
"001010011",
"001010011",
"001010010",
"001010010",
"001010010",
"001010001",
"001010001",
"001010001",
"001010000",
"001010000",
"001010000",
"001001111",
"001001111",
"001001111",
"001001111",
"001001110",
"001001110",
"001001110",
"001001101",
"001001101",
"001001101",
"001001100",
"001001100",
"001001100",
"001001011",
"001001011",
"001001011",
"001001010",
"001001010",
"001001010",
"001001001",
"001001001",
"001001001",
"001001001",
"001001000",
"001001000",
"001001000",
"001000111",
"001000111",
"001000111",
"001000110",
"001000110",
"001000110",
"001000101",
"001000101",
"001000101",
"001000100",
"001000100",
"001000100",
"001000011",
"001000011",
"001000011",
"001000011",
"001000010",
"001000010",
"001000010",
"001000001",
"001000001",
"001000001",
"001000000",
"001000000",
"001000000",
"000111111",
"000111111",
"000111111",
"000111110",
"000111110",
"000111110",
"000111101",
"000111101",
"000111101",
"000111101",
"000111100",
"000111100",
"000111100",
"000111011",
"000111011",
"000111011",
"000111010",
"000111010",
"000111011",
"000111010",
"000111010",
"000111010",
"000111010",
"000111010",
"000111001",
"000111001",
"000111001",
"000111001",
"000111001",
"000111000",
"000111000",
"000111000",
"000111000",
"000111000",
"000110111",
"000110111",
"000110111",
"000110111",
"000110111",
"000110110",
"000110110",
"000110110",
"000110110",
"000110110",
"000110101",
"000110101",
"000110101",
"000110101",
"000110101",
"000110100",
"000110100",
"000110100",
"000110100",
"000110100",
"000110011",
"000110011",
"000110011",
"000110011",
"000110011",
"000110010",
"000110010",
"000110010",
"000110010",
"000110010",
"000110001",
"000110001",
"000110001",
"000110001",
"000110001",
"000110000",
"000110000",
"000110000",
"000110000",
"000110000",
"000101111",
"000101111",
"000101111",
"000101111",
"000101111",
"000101110",
"000101110",
"000101110",
"000101110",
"000101110",
"000101101",
"000101101",
"000101101",
"000101101",
"000101101",
"000101100",
"000101100",
"000101100",
"000101100",
"000101100",
"000101011",
"000101011",
"000101011",
"000101011",
"000101011",
"000101010",
"000101010",
"000101010",
"000101010",
"000101010",
"000101001",
"000101001",
"000101001",
"000101001",
"000101001",
"000101000",
"000101000",
"000101000",
"000101000",
"000101000",
"000100111",
"000100111",
"000100111",
"000100111",
"000100111",
"000100110",
"000100110",
"000100110",
"000100110",
"000100110",
"000100101",
"000100101",
"000100101",
"000100101",
"000100101",
"000100101",
"000100100",
"000100100",
"000100100",
"000100100",
"000100100",
"000100011",
"000100011",
"000100011",
"000100011",
"000100011",
"000100010",
"000100010",
"000100010",
"000100010",
"000100010",
"000100001",
"000100001",
"000100001",
"000100001",
"000100001",
"000100000",
"000100000",
"000100000",
"000100000",
"000100000",
"000011111",
"000011111",
"000011111",
"000011111",
"000011111",
"000011110",
"000011110",
"000011110",
"000011110",
"000011110",
"000011101",
"000011101",
"000011101",
"000011101",
"000011101",
"000011100",
"000011100",
"000011100",
--464 
others => "000000000" 
);

begin
addr_reg <= addr;
data <= STOR(to_integer(unsigned(addr_reg)));

end Behavioral;

		