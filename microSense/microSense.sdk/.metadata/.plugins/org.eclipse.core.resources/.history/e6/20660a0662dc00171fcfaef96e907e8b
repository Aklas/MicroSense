//AXI GPIO driver
#include "xgpio.h"
//send data over UART
#include "xil_printf.h"
//information about AXI peripherals
#include "xparameters.h"
#include "info.h"
XGpio gpio0, gpio1, gpio2;
u32 switchVal, color, addr, we;

struct image myImage = {
		 {0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF},
		 11,10,
		 0,0,
		 0x0000
};

struct image numbers[10] = {
		{
				{0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF},
				11, 10,
				0,0,
				0xFFFF
		},
		{
				{0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF},
				11, 10,
				0,0,
				0xFFFF
		},
		{
				{0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555},
				11, 10,
				0,0,
				0xFFFF
		},
		{
				{0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF},
				11, 10,
				0,0,
				0xFFFF
		},
		{
				{0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF},
				11, 10,
				0,0,
				0xFFFF
		},
		{
				{0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF},
				11, 10,
				0,0,
				0xFFFF
		},
		{
				{0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF},
				11, 10,
				0,0,
				0xFFFF
		},
		{
				{0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF},
				11, 10,
				0,0,
				0xFFFF
		},
		{
				{0xFFF,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0xFFF,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0xFFF,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF},
				11, 10,
				0,0,
				0xFFFF
		},
		{
				{0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0x555,0x555,0x555,0x555,0x555,0xFFF,0xFFF,0xFFF,0xFFF},
				11, 10,
				0,0,
				0xFFFF
		}
};

//struct image trex[]

struct groundStruct ground = {
		 {0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xbbb,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xbbb,0xfff,0xfff,0xfff,0xeee,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0x999,0xeee,0xbbb,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0x999,0xeee,0xccc,0xfff,0xddd,0xbbb,0xddd,0xddd,0xfff,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xfff,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0xfff,0xfff,0xccc,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xeee,0xfff,0xeee,0xeee,0xfff,0xccc,0xfff,0xfff,0xfff,0xfff,0xfff,0xbbb,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xccc,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xccc,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xccc,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xccc,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xccc,0xfff,0xeee,0xeee,0xfff,0xfff,0xfff,0xfff,0xeee,0xeee,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xeee,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xccc,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xddd,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xeee,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff},
		 5,240,
		 -100,0,
		 0x0000
};

int main() {
	setGPIO();

	//0xFFFFFFFF;
	//0x00000000;

	// Assume distance is 0x11F = 287

	//drawImage(myImage);
	//moveImage(10, 10, &myImage);

	// clear screen

	waitFor(100000);
	for(int x=0; x < 80; x++){
		for(int y=0; y < 60; y++){
			drawPixel(x, y, 0xFFFFFF);
		}
	}
	/*
	for(int j=0; j < 1000; j++){
		updateNumbers(j);
		waitFor(10000);
	}
	*/

	//waitFor(100000);
	// while loop to update the screen
	//drawGround();
	int currentValue = 0;
	while(1){
		// read number from the distance value and display

		// check to see if distance is within certain threshold then jump t rex
		currentValue = XGpio_DiscreteRead(&gpio0, 1);
		// move the ground
		//drawGround();
		//if(currentValue > )
		//updateNumbers(currentValue);
		//updateNumbers(123);
		/*
		if(currentValue < 1){
			currentValue = 38;
		}else if(40 < currentValue < 67){
			currentValue = currentValue - 27;
		}else if(67 < currentValue < 80){
			currentValue -= 32;
		}else if (80 < currentValue < 119) {
			currentValue -= 37;
		}else if (119 < currentValue < 150) {
			currentValue -= 43;
		}else if (150 < currentValue < 207) {
			currentValue -= 570;
		}else if (207 < currentValue < 254) {
			currentValue -= 74;
		}else if (254 < currentValue < 311) {
			currentValue -= 93;
		}else {
			currentValue = 0;
		}

		*/
		/*
		if(currentValue < 10){
			currentValue = 380;
		}else if (40 < currentValue <80) {
			currentValue -= 40;
		}else if (80 < currentValue <120) {
			currentValue -= 65;
		}else if (120 < currentValue <160) {
			currentValue -= 70;
		}else if (160 < currentValue <200) {
			currentValue -= 75;
		}else if (200 < currentValue <240) {
			currentValue -= 80;
		}else if (240 < currentValue <280) {
			currentValue -= 85;
		}else if (280 < currentValue <320) {
			currentValue -= 90;
		}
		*/
		if(currentValue < 10){
			currentValue = 380;
		}else if (40 < currentValue <50) {
			currentValue -= 40;
		}else if (50 < currentValue <60) {
			currentValue -= 40;
		}else if (60 < currentValue <70) {
			currentValue -= 40;
		}else if (70 < currentValue <80) {
			currentValue -= 40;
		}else if (80 < currentValue <90) {
			currentValue -= 40;
		}else if (90 < currentValue <100) {
			currentValue -= 40;
		}else if (100 < currentValue <110) {
			currentValue -= 40;
		}else if (110 < currentValue <120) {
			currentValue -= 40;
		}else if (120 < currentValue <130) {
			currentValue -= 40;
		}else if (130 < currentValue <140) {
			currentValue -= 40;
		}else if (140 < currentValue <150) {
			currentValue -= 40;
		}else if (150 < currentValue <160) {
			currentValue -= 40;
		}else if (160 < currentValue <170) {
			currentValue -= 40;
		}else if (170 < currentValue <180) {
			currentValue -= 40;
		}else if (180 < currentValue <190) {
			currentValue -= 40;
		}else if (190 < currentValue <200) {
			currentValue -= 40;
		}else if (200 < currentValue <210) {
			currentValue -= 40;
		}else if (210 < currentValue <220) {
			currentValue -= 40;
		}else if (220 < currentValue <230) {
			currentValue -= 40;
		}else if (230 < currentValue <240) {
			currentValue -= 40;
		}else if (240 < currentValue <250) {
			currentValue -= 40;
		}else if (250 < currentValue <260) {
			currentValue -= 40;
		}else if (260 < currentValue <270) {
			currentValue -= 40;
		}else if (270 < currentValue <280) {
			currentValue -= 40;
		}else if (280 < currentValue <290) {
			currentValue -= 40;
		}else if (290 < currentValue <300) {
			currentValue -= 40;
		}else if (300 < currentValue <310) {
			currentValue -= 40;
		}

		updateNumbers(currentValue);
	}

	return 0;
}

void setGPIO() {
	// intialize GPIO pins
	XGpio_Initialize(&gpio0, 0);
	XGpio_Initialize(&gpio1, 1);
	XGpio_Initialize(&gpio2, 2);

	// set GPIO directions
	XGpio_SetDataDirection(&gpio0, 1, 0xFFFFFFFF);
	XGpio_SetDataDirection(&gpio1, 1, 0x00000000);
	XGpio_SetDataDirection(&gpio2, 1, 0x00000000);
	XGpio_SetDataDirection(&gpio2, 2, 0x00000000);
}

void drawPixel(int x, int y, int color){
	if (x < 80 && y < 60) {
		XGpio_DiscreteWrite(&gpio2, 1, x + 80*y);
		XGpio_DiscreteWrite(&gpio1, 1, color);
		XGpio_DiscreteWrite(&gpio2, 2, 1);
	}
	XGpio_DiscreteWrite(&gpio2, 2, 0);
}
void drawImage(struct image anImage){
	for(int8_t y = 0; y < anImage.height; y++){
		// on the y th line
		for (int8_t x = 0; x < anImage.width; x++) {
			// on the x the line
			// pixel vertical address = (y + image.Y)
			// pixel horizontal address = (x + image.X)
			drawPixel(x + anImage.posX, y + anImage.posY, anImage.data[(x + (anImage.width)*y)]);
		}
	}
}

void eraseImage(struct image anImage){
	for(int8_t y = 0; y < anImage.height; y++){
		// on the y th line
		for (int8_t x = 0; x < anImage.width; x++) {
			// on the x the line
			// pixel vertical address = (y + image.Y)
			// pixel horizontal address = (x + image.X)
			drawPixel(x + anImage.posX, y + anImage.posY, anImage.background);
		}
	}
}

void moveImage(int8_t deltaX, int8_t deltaY, struct image* anImage){
	//eraseImage(*anImage);
	//anImage.posX = anImage.posX + deltaX;
	anImage->posX = (anImage->posX)+deltaX;
	anImage->posY = (anImage->posY)+deltaY;
	//drawImage(*anImage);
}
void waitFor(numCycles){
	for(int i=0; i < numCycles; i++){}
}
void drawNumber(int number, int xStart, int yStart){
	int hundreds = number/100;
	int tens = (number - (100*hundreds))/10;
	int ones = (number - (hundreds*100) - (tens*10));

	// variables to save location
	int tempX = 0;
	int tempY = 0;

	// drawing hundreds
	struct image hundredNum = numbers[hundreds];
	tempX = hundredNum.posX;
	tempY = hundredNum.posY;
	moveImage((xStart - tempX), (yStart - tempY), &hundredNum);
	drawImage(hundredNum);
	moveImage(tempX-xStart, tempY-yStart, &hundredNum);

	// drawing tens
	struct image tenNum = numbers[tens];
	tempX = tenNum.posX;
	tempY = tenNum.posY;
	moveImage((xStart - tempX) + 10, (yStart - tempY), &tenNum);
	drawImage(tenNum);
	moveImage(tempX-xStart-10, tempY-yStart, &tenNum);

	//drawdot
	drawPixel(xStart + 21, yStart + 10, 0x555);
	drawPixel(xStart + 22, yStart + 10, 0x555);

	drawPixel(xStart + 21, yStart + 9, 0x555);
	drawPixel(xStart + 22, yStart + 9, 0x555);

	// drawing tens
	struct image oneNum = numbers[ones];
	tempX = oneNum.posX;
	tempY = oneNum.posY;
	moveImage((xStart - tempX) + 24, (yStart - tempY), &oneNum);
	drawImage(oneNum);
	moveImage(tempX-xStart-24, tempY-yStart, &oneNum);

}
void updateNumbers(int number){
	drawCenti(number, 0, 0);
	drawInch(number, 46, 0);
}
void drawCenti(int number, int xStart, int yStart){
	drawNumber(number, xStart, yStart);
}

void drawInch(int number, int xStart, int yStart){
	drawNumber(number/25.4, xStart, yStart);
}

void drawGround(){
	for(int8_t y = 0; y < ground.height; y++){
		// on the y the line
		for (int8_t x = 0; x < ground.width; x++) {
			// on the x the line
			// pixel vertical address = (y + image.Y)
			// pixel horizontal address = (x + image.X)
			drawPixel(x + ground.posX, y + ground.posY, ground.data[(x + (ground.width)*y)]);
		}
	}
	drawPixel(79, 1, 0x0);
}

